from aiogram import types, Dispatcher

from src.consts import CallbackData
from src.tg.keyboards import (
    start_keyboard, main_menu_keyboard,
    back_to_main_menu_keyboard, get_main_menu_settings_game_keyboard,
)
from src.tg.utils.db_funcs import create_new_user, get_user


about_message = """
–ü—Ä–∏–≤–µ—Ç! üëã
–Ø [—à–∞—Ö–º–∞—Ç–Ω—ã–π —á–∞—Ç-–±–æ—Ç –ø—Ä–æ–µ–∫—Ç](https://github.com/K1rL3s/Telegram-Chess-Bot) –¥–ª—è –Ø–Ω–¥–µ–∫—Å –õ–∏—Ü–µ—è 2022/2023.
"""

rules_help_message = """
–ü—Ä–∞–≤–∏–ª–∞ —à–∞—Ö–º–∞—Ç:
...

–ü–∏—à–∏—Ç–µ —Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "*–ö–ª–µ—Ç–∫–∞–ö–ª–µ—Ç–∫–∞*" –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: "*e2e4*", "*a8b8*".

–î–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—à–∫–∏ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –±—É–∫–≤—É —Ñ–∏–≥—É—Ä—ã –≤ —Ö–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: "*c7c8q*" - –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—É.
*q* - –∫–æ—Ä–æ–ª–µ–≤–∞, *r* - –ª–∞–¥—å—è, *b* - —Å–ª–æ–Ω, *n* - –∫–æ–Ω—å. 

...
"""


async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start.
    """

    await create_new_user(message.from_user.id)
    await message.reply(about_message, reply_markup=start_keyboard, parse_mode='markdown')


async def main_menu(message: types.Message | types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /menu, /–º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    """

    if isinstance(message, types.CallbackQuery):
        message = message.message

    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç, —è - *–º–µ–Ω—é!*",
        reply_markup=main_menu_keyboard,
        parse_mode='markdown'
    )


async def about(message: types.Message | types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /about –∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ –±–æ—Ç–∞"
    """

    if isinstance(message, types.CallbackQuery):
        message = message.message

    await message.reply(
        about_message,
        reply_markup=back_to_main_menu_keyboard,
        parse_mode='markdown'
    )


async def rules_help(message: types.Message | types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞/–ü–æ–º–æ—â—å"
    """

    if isinstance(message, types.CallbackQuery):
        message = message.message

    await message.reply(
        rules_help_message,
        reply_markup=get_main_menu_settings_game_keyboard(),
        parse_mode='markdown'
    )


async def statistic(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".
    """

    user = get_user(callback.from_user.id)
    message = '\n'.join((
        f'*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!*\n',
        f'–ò–≥—Ä - *{user.total_games}*',
        f'–ü–æ–±–µ–¥ - *{user.total_wins}*',
        f'–ù–∏—á—å–µ–π - *{user.total_draws}*',
        f'–ü–æ—Ä–∞–∂–µ–Ω–∏–π - *{user.total_defeats}*'
    ))
    await callback.message.reply(
        message,
        parse_mode='markdown',
        reply_markup=get_main_menu_settings_game_keyboard()
    )


def register_start(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])

    dp.register_callback_query_handler(main_menu, text=CallbackData.OPEN_MAIN_MENU.value)
    dp.register_message_handler(main_menu, commands=['menu', '–º–µ–Ω—é'])

    dp.register_callback_query_handler(about, text=CallbackData.ABOUT_BOT.value)
    dp.register_message_handler(about, commands=['about'])

    dp.register_callback_query_handler(rules_help, text=CallbackData.OPEN_RULES_HELP.value)
    dp.register_message_handler(rules_help, commands=['rules', '–ø—Ä–∞–≤–∏–ª–∞'])

    dp.register_callback_query_handler(statistic, text=CallbackData.OPEN_STATISTIC.value)
